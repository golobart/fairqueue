pipeline {
    agent any
    stages {
        stage('Preparation') {
            steps {
                sh 'echo "Preparation begins"'
                sh 'pwd'
                sh '''
                   virtualenv -p python3 jenkinscienv
                   . jenkinscienv/bin/activate
                   pip install -r cicd/requirements.txt
                '''
            }
        }
        stage('Test') {
            steps {
                sh 'echo "Tests begin"'
                sh '''
                   . jenkinscienv/bin/activate
                   python manage.py makemigrations
                   python manage.py migrate
                   python manage.py test
                   deactivate
                   rm -rf jenkinscienv
                   rm -rf .semaphore
                   rm -rf .git
                   rm  .gitignore
                '''
            }
        }
        stage('Build') {
            steps {
                sh 'echo "Build steps begin"'
                sh '''
                   #!/bin/bash
                   ps
                   ls
                   docker info
                   docker build -t golobart/django-fairqueue-jenkinsci:${BUILD_NUMBER} -f cicd/Dockerfile .
                   docker tag golobart/django-fairqueue-jenkinsci:${BUILD_NUMBER} golobart/django-fairqueue-jenkinsci:latest
                   docker images
                '''
            }
        }
        stage('Delivery') {
            steps {
                retry(2) {
                    withCredentials([usernamePassword( credentialsId: 'mydockerhubcred', usernameVariable: 'USER', passwordVariable: 'PASSWORD')]) {
                    sh '''
                       docker login -p $USER -u $PASSWORD
                       docker push golobart/django-fairqueue-jenkinsci:${BUILD_NUMBER}'
                    '''
                    }
                }

                timeout(time: 3, unit: 'MINUTES') {
                    sh 'ls -ltr'
                }
            }
        }
    }
    post {
        always {
            echo 'This will always run'
        }
        success {
            echo 'This will run only if successful'
        }
        failure {
            echo 'This will run only if failed'
        }
        unstable {
            echo 'This will run only if the run was marked as unstable'
        }
        changed {
            echo 'This will run only if the state of the Pipeline has changed'
            echo 'For example, if the Pipeline was previously failing but is now successful'
        }
    }
}
