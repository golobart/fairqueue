pipeline {
    agent any

    environment {
        DOCKER_IMG = 'golobart/django-fairqueue-jenkinsci'
    }

    options {
        skipStagesAfterUnstable()
        buildDiscarder(logRotator(numToKeepStr:'10'))
    }

    stages {
        stage('Preparation') {
            steps {
                echo "Preparation begins"
                sh 'pwd'
                sh '''
                   virtualenv -p python3 jenkinscienv
                   . jenkinscienv/bin/activate
                   pip install -r cicd/requirements.txt
                '''
            }
        }
        stage('Test') {
            steps {
                echo "Tests begin"
                sh '''
                   . jenkinscienv/bin/activate
                   python manage.py makemigrations
                   python manage.py migrate
                   python manage.py test
                   deactivate
                   rm  .gitignore
                '''
                dir("jenkinscienv"){deleteDir()}
                dir(".semaphore"){deleteDir()}
                dir(".git"){deleteDir()}
            }
        }
        stage('Build') {
            steps {
                echo "Build steps begin"
                sh '''
                   #!/bin/bash
                   ps
                   ls
                   docker info
                   docker build -t ${DOCKER_IMAGE}:${BUILD_NUMBER} -f cicd/Dockerfile .
                   docker tag ${DOCKER_IMAGE}:${BUILD_NUMBER} ${DOCKER_IMAGE}:latest
                   docker images
                '''
            }
        }
        stage('Delivery') {
            steps {
                withCredentials([usernamePassword( credentialsId: 'mydockerhubcred', usernameVariable: 'USER', passwordVariable: 'PASSWORD')]) {
                    sh '''
                       docker login -u $USER -p $PASSWORD
                       docker push ${DOCKER_IMAGE}:${BUILD_NUMBER}
                    '''
                }
            }
        }
        stage('Promotion') {
            steps {
                timeout(time: 2, unit: 'MINUTES') {
                    input 'Deploy to Production?'
                }
            }
        }
    }
    post {
        always {
            echo 'ALWAYS'
        }
        success {
            echo 'SUCCESSFUL'
            publishHTML target: [
              allowMissing: false,
              alwaysLinkToLastBuild: false,
              keepAll: true,
              reportDir: 'coverage',
              reportFiles: 'index.html',
              reportName: 'RCov Report'
              ]
        }
        failure {
            echo 'FAILED'
            mail to: 'golobart@gmail.com',
                 subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
                 body: "Something is wrong with ${env.BUILD_URL}"
        }
        unstable {
            echo 'MARKED AS UNSTABLE'
        }
        changed {
            echo 'PIPELINE STATE CHANGED'
        }
    }
}
